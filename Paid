local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Window = Library:CreateWindow({
    Title = 'Auralis | Premium Version',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main') 
}

local MainLeftBox = Tabs.Main:AddLeftGroupbox('Auto')
local MainRightBox = Tabs.Main:AddRightGroupbox('AutoSell Settings')
local BuyLeftBox = Tabs.Main:AddLeftGroupbox('Buy')

-- Create a new groupbox for the Teleport section
local TeleportBox = Tabs.Main:AddLeftGroupbox('Teleport')

-- Variables to control the auto-sell loop
local autoSellEnabled = false
local sellLoop
local itemID = 4  -- Default item ID
local quantity = 1  -- Default quantity

-- Predefined lists for item ID and quantity (these can be adjusted as needed)
local itemIDOptions = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}  -- Example item IDs
local quantityOptions = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}  -- Example quantities

-- Item options for the dropdown
local itemOptions = {"Ice Pickaxe", "Grass Pickaxe", "God Pickaxe", "Gem Pickaxe", "Diamond Pickaxe", "Gold Pickaxe", "Dynamite"}

-- Define teleport locations
local teleportLocations = {
    ["Spawn"] = Vector3.new(2641.050537109375, -1000.2561645507812, -6723.2861328125),
    ["Gem Mine"] = Vector3.new(2935.365478515625, -1004.4319458007812, -7047.2109375),
    ["Desert"] = Vector3.new(200, 10, 200),
}

-- Add Dropdown for Item ID
local itemIDDropdown = MainRightBox:AddDropdown('Item ID Dropdown', {
    Text = 'Select Item ID',
    Default = 4,  -- Default item ID
    Values = itemIDOptions,  -- List of available items as Values
    Callback = function(value)
        itemID = value  -- Set item ID to the selected value
        print("Item ID set to: " .. itemID)  -- For debugging or feedback
    end
})

-- Add Dropdown for Quantity
local quantityDropdown = MainRightBox:AddDropdown('Quantity Dropdown', {
    Text = 'Select Quantity',
    Default = 1,  -- Default quantity
    Values = quantityOptions,  -- List of available quantities as Values
    Callback = function(value)
        quantity = value  -- Set quantity to the selected value
        print("Quantity set to: " .. quantity)  -- For debugging or feedback
    end
})

-- Add Dropdown for Pickaxe Selection
local itemDropdown = BuyLeftBox:AddDropdown('Item Dropdown', {
    Text = 'Select Item',
    Default = "Dynamite",  -- Default pickaxe
    Values = itemOptions,  -- List of available pickaxes as Values
    Callback = function(value)
        selectedItem = value  -- Set selected item to the chosen value
        print("Selected Item: " .. selectedItem)  -- For debugging or feedback
    end
})

-- Add Button to Buy Selected Item
BuyLeftBox:AddButton('Buy Item', function()
    local args = {
        [1] = selectedItem  -- Pass the selected pickaxe name to the BuyTool remote
    }

    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("BuyTool"):FireServer(unpack(args))
    print("Buying Item: " .. selectedItem)  -- For feedback
end)

-- Add Dropdown for teleport location selection in Teleport section
local locationDropdown = TeleportBox:AddDropdown('Location Dropdown', {
    Text = 'Select Teleport Location',
    Default = "Spawn",  -- Default location
    Values = {"Spawn", "Gem Mine", "Desert"},  -- Locations available in the dropdown
    Callback = function(value)
        selectedLocation = teleportLocations[value]  -- Get the selected location coordinates
        print("Selected location: " .. value)  -- For debugging
    end
})

-- Add Button to teleport to selected location
TeleportBox:AddButton('Teleport to Location', function()
    if selectedLocation then
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(selectedLocation))
        print("Teleporting to: " .. tostring(selectedLocation))  -- For feedback
    else
        print("No location selected!")  -- If no location is selected, show a warning
    end
end)

-- Function to start the auto-sell loop
function AutoSell()
    autoSellEnabled = true
    sellLoop = RunService.Heartbeat:Connect(function()
        if autoSellEnabled then
            local args = {
                [1] = itemID,  -- Use dynamic item ID
                [2] = quantity  -- Use dynamic quantity
            }

            local success, errorMessage = pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SellItem"):FireServer(unpack(args))
            end)

            if not success then
                warn("Error while trying to sell item: " .. errorMessage)
            end

            wait(0.5)
        else
            sellLoop:Disconnect()
        end
    end)
end

-- Function to stop the auto-sell loop
function StopAutoSell()
    autoSellEnabled = false
    if sellLoop then
        sellLoop:Disconnect()
    end
end

-- Add AutoSell toggle
local statusLabel = MainLeftBox:AddLabel("Auto Sell Status: Inactive")

MainLeftBox:AddToggle('AutoSell', {
    Text = "Auto Sell",
    CurrentValue = false,
    Flag = "AutoSell",  -- Used to save the toggle state across sessions
    Callback = function(state)
        if state then
            AutoSell()
            statusLabel:SetText("Auto Sell Status: Active")
        else
            StopAutoSell()
            statusLabel:SetText("Auto Sell Status: Inactive")
        end
    end
})
