local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

-- Library and Theme Manager
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()

-- Services and Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- UI Window and Tabs
local Window = Library:CreateWindow({
    Title = 'Auralis | Premium Version',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'), 
    Extra = Window:AddTab('Extra')
}

-- Groupboxes
local MainLeftBox = Tabs.Main:AddLeftGroupbox('Auto')
local MainRightBox = Tabs.Main:AddRightGroupbox('AutoSell Settings')
local BuyLeftBox = Tabs.Main:AddLeftGroupbox('Buy')
local ExtraLeftBox = Tabs.Extra:AddLeftGroupbox('Extra')
local ExtraRightBox = Tabs.Extra:AddRightGroupbox('Info')
local TeleportBox = Tabs.Main:AddLeftGroupbox('Teleport')

-- Variables for Auto-Sell Loop
local autoSellEnabled = false
local sellLoop
local itemID = 4
local quantity = 1

-- Predefined Options
local itemIDOptions = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
local quantityOptions = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
local itemOptions = {"Ice Pickaxe", "Grass Pickaxe", "God Pickaxe", "Gem Pickaxe", "Diamond Pickaxe", "Gold Pickaxe", "Dynamite"}

-- Teleport Locations
local teleportLocations = {
    ["Spawn"] = Vector3.new(2641, -1000, -6723),
    ["Gem Mine"] = Vector3.new(2935, -1004, -7047),
    ["Drill Site"] = Vector3.new(3080, -1003, -6770),
    ["UnderWorld"] = Vector3.new(-948, -2154, -6704),
}

-- Keybind Toggling
local selectedKeybind = Enum.KeyCode.RightShift
local uiVisible = true
local keybindListenerConnection

-- Toggle UI Visibility Function
local function ToggleUIVisibility(input)
    print("Key pressed:", input.KeyCode.Name, "| Expected:", selectedKeybind.Name)
    if input.KeyCode == selectedKeybind then
        uiVisible = not uiVisible
        Library:Toggle()
        print(uiVisible and "UI Showed" or "UI Hidden")
    end
end

-- Keybind Listener Setup
local function SetKeybindListener()
    if keybindListenerConnection then
        keybindListenerConnection:Disconnect()
    end
    keybindListenerConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            ToggleUIVisibility(input)
        end
    end)
end

-- Close UI and Cleanup
local function CloseUI()
    if keybindListenerConnection then
        keybindListenerConnection:Disconnect()
        print("Keybind listener disconnected")
    end
    Library:Unload()
    print("UI Closed")
end

-- Init Keybind Listener
SetKeybindListener()

-- Dropdowns and Buttons
MainRightBox:AddDropdown('Item ID Dropdown', {
    Text = 'Select Item ID',
    Default = 4,
    Values = itemIDOptions,
    Callback = function(value)
        itemID = value
        print("Item ID set to:", itemID)
    end
})

MainRightBox:AddDropdown('Quantity Dropdown', {
    Text = 'Select Quantity',
    Default = 1,
    Values = quantityOptions,
    Callback = function(value)
        quantity = value
        print("Quantity set to:", quantity)
    end
})

local selectedItem = "Dynamite"
BuyLeftBox:AddDropdown('Item Dropdown', {
    Text = 'Select Item',
    Default = selectedItem,
    Values = itemOptions,
    Callback = function(value)
        selectedItem = value
        print("Selected Item:", selectedItem)
    end
})

BuyLeftBox:AddButton('Buy Item', function()
    if selectedItem then
        local args = {selectedItem}
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("BuyTool"):FireServer(unpack(args))
        print("Buying Item:", selectedItem)
    else
        warn("No item selected!")
    end
end)

local selectedLocation = teleportLocations["Spawn"]
TeleportBox:AddDropdown('Location Dropdown', {
    Text = 'Select Teleport Location',
    Default = "Spawn",
    Values = {"Spawn", "Gem Mine", "Drill Site", "UnderWorld"},
    Callback = function(value)
        selectedLocation = teleportLocations[value]
        print("Selected location:", value)
    end
})

TeleportBox:AddButton('Teleport to Location', function()
    if selectedLocation then
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(selectedLocation))
        print("Teleporting to:", tostring(selectedLocation))
    else
        print("No location selected!")
    end
end)

-- AutoSell Functions
function AutoSell()
    autoSellEnabled = true
    sellLoop = RunService.Heartbeat:Connect(function()
        if autoSellEnabled then
            local args = {
                [1] = itemID,
                [2] = quantity
            }

            local success, errorMessage = pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("SellItem"):FireServer(unpack(args))
            end)

            if not success then
                warn("Error while trying to sell item:", errorMessage)
            end

            wait(0.5)
        end
    end)
end

function StopAutoSell()
    autoSellEnabled = false
    if sellLoop then
        sellLoop:Disconnect()
    end
end

-- AutoSell Toggle
local statusLabel = MainLeftBox:AddLabel("Auto Sell Status: Inactive")

MainLeftBox:AddToggle('AutoSell', {
    Text = "Auto Sell",
    CurrentValue = false,
    Flag = "AutoSell",
    Callback = function(state)
        if state then
            AutoSell()
            statusLabel:SetText("Auto Sell Status: Active")
        else
            StopAutoSell()
            statusLabel:SetText("Auto Sell Status: Inactive")
        end
    end
})

-- Info Label
ExtraRightBox:AddLabel("Mining World V1.0")

ExtraRightBox:AddDropdown("Set Keybind", {
    Text = "Hide/Show Keybind",
    Default = "RightShift",
    Values = {"RightShift", "RightControl", "RightAlt", "End", "F1"},
    Callback = function(value)
        local keybinds = {
            RightShift = Enum.KeyCode.RightShift,
            RightControl = Enum.KeyCode.RightControl,
            RightAlt = Enum.KeyCode.RightAlt,
            End = Enum.KeyCode.End,
            F1 = Enum.KeyCode.F1,
        }

        if keybinds[value] then
            selectedKeybind = keybinds[value]
            print("UI toggle keybind set to:", selectedKeybind.Name)
            SetKeybindListener()
        else
            warn("Invalid keybind selected:", value)
        end
    end
})

-- Close UI Button
ExtraRightBox:AddButton("Close UI", function()
    CloseUI()
end)
